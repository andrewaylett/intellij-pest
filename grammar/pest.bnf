//noinspection BnfResolveForFile
{
  generate=[java="8" names="long"]

  parserClass="rs.pest.psi.PestParser"

  extends="rs.pest.psi.impl.PestElement"

  psiClassPrefix="Pest"
  psiImplClassSuffix="Impl"
  psiPackage="rs.pest.psi"
  psiImplPackage="rs.pest.psi.impl"

  elementTypeHolderClass="rs.pest.psi.PestTypes"
  elementTypeClass="rs.pest.psi.PestElementType"
  tokenTypeClass="rs.pest.psi.PestTokenType"
}

grammar_rules ::=  grammar_rule+ { recoverWhile=grammar_rules_recover }

grammar_body  ::= OPENING_BRACE expression CLOSING_BRACE {
	pin=1
	recoverWhile=grammar_body_recover
}

private grammar_body_recover ::= !rule_name

grammar_rule  ::=	rule_name ASSIGNMENT_OPERATOR modifier? grammar_body {
	implements=["com.intellij.psi.PsiNameIdentifierOwner"]
	mixin="rs.pest.psi.impl.PestGrammarRuleMixin"
	pin=1
	recoverWhile=grammar_rule_recover
}

private rule_name ::=
    valid_rule_name
  | overwritable_rule_name
  | fixed_builtin_rule_name
  {	pin=1 }

fixed_builtin_rule_name ::=
    commands
  | PUSH_TOKEN
  | PEEK_TOKEN
  |	ANY_TOKEN
  | EOI_TOKEN
  |	SOI_TOKEN
  |	DROP_TOKEN
  |	ASCII_TOKEN
  |	NEWLINE_TOKEN
  |	ASCII_DIGIT_TOKEN
  |	ASCII_ALPHA_TOKEN
  |	ASCII_ALPHANUMERIC_TOKEN
  |	ASCII_NONZERO_DIGIT_TOKEN
  |	ASCII_BIN_DIGIT_TOKEN
  |	ASCII_OCT_DIGIT_TOKEN
  |	ASCII_HEX_DIGIT_TOKEN
  |	ASCII_ALPHA_UPPER_TOKEN
  |	ASCII_ALPHA_LOWER_TOKEN {
	mixin="rs.pest.psi.impl.PestFixedBuiltinRuleNameMixin"
}

overwritable_rule_name ::= WHITESPACE_TOKEN | COMMENT_TOKEN {
	mixin="rs.pest.psi.impl.PestOverwritableRuleNameMixin"
}

valid_rule_name ::= IDENTIFIER_TOKEN {
	mixin="rs.pest.psi.impl.PestRuleNameMixin"
}

private grammar_rule_recover ::= !(rule_name )
private grammar_rules_recover ::= !(rule_name  ASSIGNMENT_OPERATOR)

modifier ::=
	SILENT_MODIFIER |
	ATOMIC_MODIFIER |
	COMPOUND_ATOMIC_MODIFIER |
	NON_ATOMIC_MODIFIER

expression ::= term infix_part*
term       ::= prefix_operator* rule postfix_operator* { pin=1 extends=expression }
// Can't name `node`, conflict with PsiElement's class
rule       ::= paren_part | atom { extends=expression }

private paren_part ::= OPENING_PAREN expression CLOSING_PAREN { pin=1 }
private infix_part ::= infix_operator term { pin=1 }

private atom ::=
	push |
	peek |
	identifier |
	string |
	range |
	builtin |
	commands

prefix_operator  ::= POSITIVE_PREDICATE_OPERATOR | NON_ATOMIC_MODIFIER
infix_operator   ::= SEQUENCE_OPERATOR | CHOICE_OPERATOR
postfix_operator ::=
	OPTIONAL_OPERATOR |
	REPEAT_OPERATOR |
	REPEAT_ONCE_OPERATOR |
	repeat_exact |
	repeat_min |
	repeat_max |
	repeat_min_max

private repeat_exact   ::= OPENING_BRACE NUMBER CLOSING_BRACE
private repeat_min     ::= OPENING_BRACE NUMBER COMMA CLOSING_BRACE
private repeat_max     ::= OPENING_BRACE COMMA NUMBER CLOSING_BRACE
private repeat_min_max ::= OPENING_BRACE NUMBER COMMA NUMBER CLOSING_BRACE

integer    ::= MINUS? NUMBER { pin=1 }
identifier ::= IDENTIFIER_TOKEN {
	mixin="rs.pest.psi.impl.PestIdentifierMixin"
	extends=expression
}

push ::= PUSH_TOKEN OPENING_PAREN expression CLOSING_PAREN {
	extends=expression
	pin=1
	name="PUSH"
}

peek ::= PEEK_TOKEN peek_slice? {
	extends=expression
	pin=1
	name="PEEK"
}

peek_slice ::= OPENING_BRACK integer? RANGE_OPERATOR integer? CLOSING_BRACK {
	pin=1
	name="PEEK.."
}

commands   ::=
	PEEK_ALL_TOKEN |
	POP_TOKEN |
	POP_ALL_TOKEN { extends=expression }
builtin    ::=
	ANY_TOKEN |
	EOI_TOKEN |
	SOI_TOKEN |
	DROP_TOKEN |
	ASCII_TOKEN |
	NEWLINE_TOKEN |
	COMMENT_TOKEN |
	WHITESPACE_TOKEN |
	ASCII_DIGIT_TOKEN |
	ASCII_ALPHA_TOKEN |
	ASCII_ALPHANUMERIC_TOKEN |
	ASCII_NONZERO_DIGIT_TOKEN |
	ASCII_BIN_DIGIT_TOKEN |
	ASCII_OCT_DIGIT_TOKEN |
	ASCII_HEX_DIGIT_TOKEN |
	ASCII_ALPHA_UPPER_TOKEN |
	ASCII_ALPHA_LOWER_TOKEN {
	extends=expression
	mixin="rs.pest.psi.impl.PestBuiltinMixin"
}

character ::= CHAR_TOKEN { extends=expression }
string    ::= INSENSITIVE_OPERATOR? STRING_TOKEN {
	extends=expression
	implements=["com.intellij.psi.PsiLanguageInjectionHost"]
	mixin="rs.pest.psi.impl.PestStringMixin"
}

range     ::= character RANGE_OPERATOR character {
	name=".."
	extends=expression
	pin=2
}

